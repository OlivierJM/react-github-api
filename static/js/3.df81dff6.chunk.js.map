{"version":3,"sources":["../node_modules/lodash/_Symbol.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","../node_modules/graphql-tag/src/index.js","../node_modules/lodash/isPlainObject.js","../node_modules/lodash/_baseGetTag.js","../node_modules/lodash/_root.js","../node_modules/lodash/_freeGlobal.js","../node_modules/lodash/_getRawTag.js","../node_modules/lodash/_objectToString.js","../node_modules/lodash/_getPrototype.js","../node_modules/lodash/_overArg.js","../node_modules/lodash/isObjectLike.js","../node_modules/graphql/jsutils/defineToJSON.mjs","../node_modules/graphql/jsutils/invariant.mjs","../node_modules/graphql/language/source.mjs","../node_modules/graphql/jsutils/defineToStringTag.mjs","../node_modules/graphql/language/location.mjs","../node_modules/graphql/error/printError.mjs","../node_modules/graphql/error/GraphQLError.mjs","../node_modules/graphql/error/syntaxError.mjs","../node_modules/graphql/language/blockStringValue.mjs","../node_modules/graphql/language/lexer.mjs","../node_modules/graphql/language/kinds.mjs","../node_modules/graphql/language/directiveLocation.mjs","../node_modules/graphql/language/parser.mjs","../node_modules/react-apollo-hooks/es/internal/SSRContext.js","../node_modules/react-apollo-hooks/es/utils.js","../node_modules/react-apollo-hooks/es/queryCache.js","../node_modules/react-apollo-hooks/es/useQuery.js","../node_modules/react-apollo-hooks/es/internal/actHack.js"],"names":["Symbol","__webpack_require__","module","exports","_slicedToArray","arr","i","Array","isArray","_arrayWithHoles","_arr","_n","_d","_e","undefined","_s","_i","iterator","next","done","push","value","length","err","_iterableToArrayLimit","TypeError","_nonIterableRest","d","__webpack_exports__","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","parse","normalize","string","replace","trim","docCache","fragmentSourceMap","printFragmentWarnings","experimentalFragmentVariables","parseDocument","doc","cacheKey","parsed","kind","Error","stripLoc","removeLocAtThisLevel","docType","prototype","toString","call","map","loc","startToken","endToken","key","valueType","keys","hasOwnProperty","ast","astFragmentMap","definitions","fragmentDefinition","fragmentName","name","sourceKey","source","body","substring","start","end","console","warn","processFragments","gql","args","arguments","literals","result","default","resetCaches","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","baseGetTag","getPrototype","isObjectLike","objectTag","funcProto","Function","objectProto","funcToString","objectCtorString","proto","Ctor","constructor","getRawTag","objectToString","nullTag","undefinedTag","symToStringTag","toStringTag","freeGlobal","freeSelf","self","root","global","nativeObjectToString","isOwn","tag","unmasked","e","overArg","getPrototypeOf","func","transform","arg","defineToJSON","classObject","fn","toJSON","inspect","nodejsCustomInspectSymbol","invariant","condition","message","source_Source","locationOffset","this","line","column","getLocation","position","match","lineRegexp","exec","index","highlightSourceAtLocation","location","firstLineColumnOffset","whitespace","lineIndex","lineOffset","lineNum","columnOffset","columnNum","lines","split","concat","existingLines","filter","_ref","padLen","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_ref4","prefix","Math","max","return","_ref3","str","join","printPrefixedLines","len","GraphQLError","nodes","positions","path","originalError","extensions","_nodes","_source","node","_locations","_positions","reduce","list","pos","_extensions","enumerable","writable","locations","Boolean","stack","defineProperty","configurable","captureStackTrace","syntaxError","description","blockStringValue","rawString","commonIndent","indent","leadingWhitespace","isBlank","shift","pop","createLexer","options","startOfFileToken","Tok","TokenKind","SOF","lastToken","token","lineStart","advance","advanceLexer","lookahead","EOF","readToken","COMMENT","get","create","error","printedLocations","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","printError","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","NAME","INT","FLOAT","STRING","BLOCK_STRING","getTokenDesc","charCodeAt","String","prev","printCharCode","code","isNaN","JSON","stringify","fromCharCode","toUpperCase","lexer","bodyLength","startPosition","positionAfterWhitespace","col","readComment","readName","firstCode","isFloat","readDigits","readNumber","chunkStart","rawValue","readBlockString","charCode","a","b","c","char2hex","readString","unexpectedCharacterMessage","Kind","DOCUMENT","OPERATION_DEFINITION","VARIABLE_DEFINITION","SELECTION_SET","FIELD","ARGUMENT","FRAGMENT_SPREAD","INLINE_FRAGMENT","FRAGMENT_DEFINITION","VARIABLE","BOOLEAN","NULL","ENUM","LIST","OBJECT","OBJECT_FIELD","DIRECTIVE","NAMED_TYPE","LIST_TYPE","NON_NULL_TYPE","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","OBJECT_TYPE_DEFINITION","FIELD_DEFINITION","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","UNION_TYPE_DEFINITION","ENUM_TYPE_DEFINITION","ENUM_VALUE_DEFINITION","INPUT_OBJECT_TYPE_DEFINITION","DIRECTIVE_DEFINITION","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","DirectiveLocation","QUERY","MUTATION","SUBSCRIPTION","SCHEMA","SCALAR","ARGUMENT_DEFINITION","INTERFACE","UNION","ENUM_VALUE","INPUT_OBJECT","INPUT_FIELD_DEFINITION","sourceObj","many","parseDefinition","parseValue","expect","parseValueLiteral","parseType","type","parseTypeReference","parseName","peek","parseExecutableDefinition","parseTypeSystemDefinition","keywordToken","expectKeyword","directives","parseDirectives","operationTypes","parseOperationTypeDefinition","unexpected","parseSchemaExtension","parseScalarTypeExtension","interfaces","parseImplementsInterfaces","fields","parseFieldsDefinition","parseObjectTypeExtension","parseInterfaceTypeExtension","types","parseUnionMemberTypes","parseUnionTypeExtension","values","parseEnumValuesDefinition","parseEnumTypeExtension","parseInputFieldsDefinition","parseInputObjectTypeExtension","parseTypeSystemExtension","peekDescription","parseOperationDefinition","parseFragmentName","variableDefinitions","parseVariableDefinitions","typeCondition","parseNamedType","selectionSet","parseSelectionSet","parseFragmentDefinition","operation","parseOperationType","operationToken","parseVariableDefinition","variable","parseVariable","defaultValue","skip","selections","parseSelection","hasTypeCondition","skipKeyword","parseFragment","alias","nameOrAlias","parseArguments","parseField","isConst","item","parseConstArgument","parseArgument","parseConstValue","parseValueValue","any","parseList","parseObjectField","parseObject","parseStringLiteral","block","parseDirective","parseSchemaDefinition","parseDescription","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseArgumentDefs","parseDirectiveLocation","parseDirectiveLocations","parseDirectiveDefinition","allowLegacySDLImplementsInterfaces","allowLegacySDLEmptyFields","parseFieldDefinition","parseInputValueDef","parseEnumValueDefinition","noLocation","Loc","atToken","openKind","parseFn","closeKind","SSRContext","react","objToKey","obj","isPlainObject_default","sortedObj","sort","cachedQueriesByClient","WeakMap","getCachedQueriesForClient","client","queriesForClient","Map","set","getCacheKey","query","excluded","target","sourceKeys","indexOf","_objectWithoutPropertiesLoose","printer","_extends","assign","apply","useQuery","_temp","_ref$ssr","ssr","_ref$skip","_ref$suspend","suspend","pollInterval","_ref$notifyOnNetworkS","notifyOnNetworkStatusChange","context","metadata","variables","actualCachePolicy","fetchPolicy","errorPolicy","fetchResults","ApolloContext","ssrManager","ssrInUse","shouldSkip","watchQueryOptions","acc","observableQuery","watchQuery","getCachedObservableQuery","_useState","responseId","setResponseId","currentResult","data","errors","ApolloError","graphQLErrors","loading","networkStatus","partial","invalidateCurrentResult","x","callback","subscription","subscribe","delete","invalidateCachedObservableQuery","unsubscribe","ensureSupportedFetchPolicy","helpers","fetchMore","bind","refetch","startPolling","stopPolling","updateQuery","register"],"mappings":"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","file":"static/js/3.df81dff6.chunk.js","sourcesContent":["var root = require('./_root');\n/** Built-in value references. */\n\n\nvar Symbol = root.Symbol;\nmodule.exports = Symbol;","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","var parser = require('graphql/language/parser');\n\nvar parse = parser.parse; // Strip insignificant whitespace\n// Note that this could do a lot more, such as reorder fields etc.\n\nfunction normalize(string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n} // A map docString -> graphql document\n\n\nvar docCache = {}; // A map fragmentName -> [normalized source]\n\nvar fragmentSourceMap = {};\n\nfunction cacheKeyFromLoc(loc) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n} // For testing.\n\n\nfunction resetCaches() {\n  docCache = {};\n  fragmentSourceMap = {};\n} // Take a unstripped parsed document (query/mutation or even fragment), and\n// check all fragment definitions, checking for name->source uniqueness.\n// We also want to make sure only unique fragments exist in the document.\n\n\nvar printFragmentWarnings = true;\n\nfunction processFragments(ast) {\n  var astFragmentMap = {};\n  var definitions = [];\n\n  for (var i = 0; i < ast.definitions.length; i++) {\n    var fragmentDefinition = ast.definitions[i];\n\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc); // We know something about this fragment\n\n      if (fragmentSourceMap.hasOwnProperty(fragmentName) && !fragmentSourceMap[fragmentName][sourceKey]) {\n        // this is a problem because the app developer is trying to register another fragment with\n        // the same name as one previously registered. So, we tell them about it.\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\" + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\" + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n      } else if (!fragmentSourceMap.hasOwnProperty(fragmentName)) {\n        fragmentSourceMap[fragmentName] = {};\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n      }\n\n      if (!astFragmentMap[sourceKey]) {\n        astFragmentMap[sourceKey] = true;\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  }\n\n  ast.definitions = definitions;\n  return ast;\n}\n\nfunction disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\n\nfunction stripLoc(doc, removeLocAtThisLevel) {\n  var docType = Object.prototype.toString.call(doc);\n\n  if (docType === '[object Array]') {\n    return doc.map(function (d) {\n      return stripLoc(d, removeLocAtThisLevel);\n    });\n  }\n\n  if (docType !== '[object Object]') {\n    throw new Error('Unexpected input.');\n  } // We don't want to remove the root loc field so we can use it\n  // for fragment substitution (see below)\n\n\n  if (removeLocAtThisLevel && doc.loc) {\n    delete doc.loc;\n  } // https://github.com/apollographql/graphql-tag/issues/40\n\n\n  if (doc.loc) {\n    delete doc.loc.startToken;\n    delete doc.loc.endToken;\n  }\n\n  var keys = Object.keys(doc);\n  var key;\n  var value;\n  var valueType;\n\n  for (key in keys) {\n    if (keys.hasOwnProperty(key)) {\n      value = doc[keys[key]];\n      valueType = Object.prototype.toString.call(value);\n\n      if (valueType === '[object Object]' || valueType === '[object Array]') {\n        doc[keys[key]] = stripLoc(value, true);\n      }\n    }\n  }\n\n  return doc;\n}\n\nvar experimentalFragmentVariables = false;\n\nfunction parseDocument(doc) {\n  var cacheKey = normalize(doc);\n\n  if (docCache[cacheKey]) {\n    return docCache[cacheKey];\n  }\n\n  var parsed = parse(doc, {\n    experimentalFragmentVariables: experimentalFragmentVariables\n  });\n\n  if (!parsed || parsed.kind !== 'Document') {\n    throw new Error('Not a valid GraphQL document.');\n  } // check that all \"new\" fragments inside the documents are consistent with\n  // existing fragments of the same name\n\n\n  parsed = processFragments(parsed);\n  parsed = stripLoc(parsed, false);\n  docCache[cacheKey] = parsed;\n  return parsed;\n}\n\nfunction enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\n\nfunction disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n} // XXX This should eventually disallow arbitrary string interpolation, like Relay does\n\n\nfunction gql()\n/* arguments */\n{\n  var args = Array.prototype.slice.call(arguments);\n  var literals = args[0]; // We always get literals[0] and then matching post literals for each arg given\n\n  var result = typeof literals === \"string\" ? literals : literals[0];\n\n  for (var i = 1; i < args.length; i++) {\n    if (args[i] && args[i].kind && args[i].kind === 'Document') {\n      result += args[i].loc.source.body;\n    } else {\n      result += args[i];\n    }\n\n    result += literals[i];\n  }\n\n  return parseDocument(result);\n} // Support typescript, which isn't as nice as Babel about default exports\n\n\ngql.default = gql;\ngql.resetCaches = resetCaches;\ngql.disableFragmentWarnings = disableFragmentWarnings;\ngql.enableExperimentalFragmentVariables = enableExperimentalFragmentVariables;\ngql.disableExperimentalFragmentVariables = disableExperimentalFragmentVariables;\nmodule.exports = gql;","var baseGetTag = require('./_baseGetTag'),\n    getPrototype = require('./_getPrototype'),\n    isObjectLike = require('./isObjectLike');\n/** `Object#toString` result references. */\n\n\nvar objectTag = '[object Object]';\n/** Used for built-in method references. */\n\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n/** Used to resolve the decompiled source of functions. */\n\nvar funcToString = funcProto.toString;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty = objectProto.hasOwnProperty;\n/** Used to infer the `Object` constructor. */\n\nvar objectCtorString = funcToString.call(Object);\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\n\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n\n  var proto = getPrototype(value);\n\n  if (proto === null) {\n    return true;\n  }\n\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;\n}\n\nmodule.exports = isPlainObject;","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n/** `Object#toString` result references. */\n\n\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n/** Built-in value references. */\n\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\n\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n\n  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n}\n\nmodule.exports = baseGetTag;","var freeGlobal = require('./_freeGlobal');\n/** Detect free variable `self`. */\n\n\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n/** Used as a reference to the global object. */\n\nvar root = freeGlobal || freeSelf || Function('return this')();\nmodule.exports = root;","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\nmodule.exports = freeGlobal;","var Symbol = require('./_Symbol');\n/** Used for built-in method references. */\n\n\nvar objectProto = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\n\nvar nativeObjectToString = objectProto.toString;\n/** Built-in value references. */\n\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\n\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = getRawTag;","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\n\nvar nativeObjectToString = objectProto.toString;\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\n\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;","var overArg = require('./_overArg');\n/** Built-in value references. */\n\n\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\nmodule.exports = getPrototype;","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function (arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport nodejsCustomInspectSymbol from './nodejsCustomInspectSymbol';\n/**\n * The `defineToJSON()` function defines toJSON() and inspect() prototype\n * methods, if no function provided they become aliases for toString().\n */\n\nexport default function defineToJSON( // eslint-disable-next-line flowtype/no-weak-types\nclassObject) {\n  var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : classObject.prototype.toString;\n  classObject.prototype.toJSON = fn;\n  classObject.prototype.inspect = fn;\n\n  if (nodejsCustomInspectSymbol) {\n    classObject.prototype[nodejsCustomInspectSymbol] = fn;\n  }\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nexport default function invariant(condition, message) {\n  /* istanbul ignore else */\n  if (!condition) {\n    throw new Error(message);\n  }\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from '../jsutils/invariant';\nimport defineToStringTag from '../jsutils/defineToStringTag';\n/**\n * A representation of source input to GraphQL.\n * `name` and `locationOffset` are optional. They are useful for clients who\n * store GraphQL documents in source files; for example, if the GraphQL input\n * starts at line 40 in a file named Foo.graphql, it might be useful for name to\n * be \"Foo.graphql\" and location to be `{ line: 40, column: 0 }`.\n * line and column in locationOffset are 1-indexed\n */\n\nexport var Source = function Source(body, name, locationOffset) {\n  this.body = body;\n  this.name = name || 'GraphQL request';\n  this.locationOffset = locationOffset || {\n    line: 1,\n    column: 1\n  };\n  !(this.locationOffset.line > 0) ? invariant(0, 'line in locationOffset is 1-indexed and must be positive') : void 0;\n  !(this.locationOffset.column > 0) ? invariant(0, 'column in locationOffset is 1-indexed and must be positive') : void 0;\n}; // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(Source);","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * The `defineToStringTag()` function checks first to see if the runtime\n * supports the `Symbol` class and then if the `Symbol.toStringTag` constant\n * is defined as a `Symbol` instance. If both conditions are met, the\n * Symbol.toStringTag property is defined as a getter that returns the\n * supplied class constructor's name.\n *\n * @method defineToStringTag\n *\n * @param {Class<any>} classObject a class such as Object, String, Number but\n * typically one of your own creation through the class keyword; `class A {}`,\n * for example.\n */\nexport default function defineToStringTag(classObject) {\n  if (typeof Symbol === 'function' && Symbol.toStringTag) {\n    Object.defineProperty(classObject.prototype, Symbol.toStringTag, {\n      get: function get() {\n        return this.constructor.name;\n      }\n    });\n  }\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  var lineRegexp = /\\r\\n|[\\n\\r]/g;\n  var line = 1;\n  var column = position + 1;\n  var match;\n\n  while ((match = lineRegexp.exec(source.body)) && match.index < position) {\n    line += 1;\n    column = position + 1 - (match.index + match[0].length);\n  }\n\n  return {\n    line: line,\n    column: column\n  };\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { getLocation } from '../language/location';\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n */\n\nexport function printError(error) {\n  var printedLocations = [];\n\n  if (error.nodes) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = error.nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var node = _step.value;\n\n        if (node.loc) {\n          printedLocations.push(highlightSourceAtLocation(node.loc.source, getLocation(node.loc.source, node.loc.start)));\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  } else if (error.source && error.locations) {\n    var source = error.source;\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = error.locations[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var location = _step2.value;\n        printedLocations.push(highlightSourceAtLocation(source, location));\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  }\n\n  return printedLocations.length === 0 ? error.message : [error.message].concat(printedLocations).join('\\n\\n') + '\\n';\n}\n/**\n * Render a helpful description of the location of the error in the GraphQL\n * Source document.\n */\n\nfunction highlightSourceAtLocation(source, location) {\n  var firstLineColumnOffset = source.locationOffset.column - 1;\n  var body = whitespace(firstLineColumnOffset) + source.body;\n  var lineIndex = location.line - 1;\n  var lineOffset = source.locationOffset.line - 1;\n  var lineNum = location.line + lineOffset;\n  var columnOffset = location.line === 1 ? firstLineColumnOffset : 0;\n  var columnNum = location.column + columnOffset;\n  var lines = body.split(/\\r\\n|[\\n\\r]/g);\n  return \"\".concat(source.name, \" (\").concat(lineNum, \":\").concat(columnNum, \")\\n\") + printPrefixedLines([// Lines specified like this: [\"prefix\", \"string\"],\n  [\"\".concat(lineNum - 1, \": \"), lines[lineIndex - 1]], [\"\".concat(lineNum, \": \"), lines[lineIndex]], ['', whitespace(columnNum - 1) + '^'], [\"\".concat(lineNum + 1, \": \"), lines[lineIndex + 1]]]);\n}\n\nfunction printPrefixedLines(lines) {\n  var existingLines = lines.filter(function (_ref) {\n    var _ = _ref[0],\n        line = _ref[1];\n    return line !== undefined;\n  });\n  var padLen = 0;\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = existingLines[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var _ref4 = _step3.value;\n      var prefix = _ref4[0];\n      padLen = Math.max(padLen, prefix.length);\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n\n  return existingLines.map(function (_ref3) {\n    var prefix = _ref3[0],\n        line = _ref3[1];\n    return lpad(padLen, prefix) + line;\n  }).join('\\n');\n}\n\nfunction whitespace(len) {\n  return Array(len + 1).join(' ');\n}\n\nfunction lpad(len, str) {\n  return whitespace(len - str.length) + str;\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { printError } from './printError';\nimport { getLocation } from '../language/location';\nexport function GraphQLError( // eslint-disable-line no-redeclare\nmessage, nodes, source, positions, path, originalError, extensions) {\n  // Compute list of blame nodes.\n  var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined; // Compute locations in the source for the given nodes/positions.\n\n\n  var _source = source;\n\n  if (!_source && _nodes) {\n    var node = _nodes[0];\n    _source = node && node.loc && node.loc.source;\n  }\n\n  var _positions = positions;\n\n  if (!_positions && _nodes) {\n    _positions = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(node.loc.start);\n      }\n\n      return list;\n    }, []);\n  }\n\n  if (_positions && _positions.length === 0) {\n    _positions = undefined;\n  }\n\n  var _locations;\n\n  if (positions && source) {\n    _locations = positions.map(function (pos) {\n      return getLocation(source, pos);\n    });\n  } else if (_nodes) {\n    _locations = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(getLocation(node.loc.source, node.loc.start));\n      }\n\n      return list;\n    }, []);\n  }\n\n  var _extensions = extensions || originalError && originalError.extensions;\n\n  Object.defineProperties(this, {\n    message: {\n      value: message,\n      // By being enumerable, JSON.stringify will include `message` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: true,\n      writable: true\n    },\n    locations: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _locations || undefined,\n      // By being enumerable, JSON.stringify will include `locations` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_locations)\n    },\n    path: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: path || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(path)\n    },\n    nodes: {\n      value: _nodes || undefined\n    },\n    source: {\n      value: _source || undefined\n    },\n    positions: {\n      value: _positions || undefined\n    },\n    originalError: {\n      value: originalError\n    },\n    extensions: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _extensions || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_extensions)\n    }\n  }); // Include (non-enumerable) stack trace.\n\n  if (originalError && originalError.stack) {\n    Object.defineProperty(this, 'stack', {\n      value: originalError.stack,\n      writable: true,\n      configurable: true\n    });\n  } else if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, GraphQLError);\n  } else {\n    Object.defineProperty(this, 'stack', {\n      value: Error().stack,\n      writable: true,\n      configurable: true\n    });\n  }\n}\nGraphQLError.prototype = Object.create(Error.prototype, {\n  constructor: {\n    value: GraphQLError\n  },\n  name: {\n    value: 'GraphQLError'\n  },\n  toString: {\n    value: function toString() {\n      return printError(this);\n    }\n  }\n});","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { GraphQLError } from './GraphQLError';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(\"Syntax Error: \".concat(description), undefined, source, [position]);\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n */\nexport default function blockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = null;\n\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    var indent = leadingWhitespace(line);\n\n    if (indent < line.length && (commonIndent === null || indent < commonIndent)) {\n      commonIndent = indent;\n\n      if (commonIndent === 0) {\n        break;\n      }\n    }\n  }\n\n  if (commonIndent) {\n    for (var _i = 1; _i < lines.length; _i++) {\n      lines[_i] = lines[_i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  while (lines.length > 0 && isBlank(lines[0])) {\n    lines.shift();\n  }\n\n  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n    lines.pop();\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.join('\\n');\n}\n\nfunction leadingWhitespace(str) {\n  var i = 0;\n\n  while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n    i++;\n  }\n\n  return i;\n}\n\nfunction isBlank(str) {\n  return leadingWhitespace(str) === str.length;\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport defineToJSON from '../jsutils/defineToJSON';\nimport { syntaxError } from '../error';\nimport blockStringValue from './blockStringValue';\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport function createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n\n  return token;\n}\n/**\n * The return type of createLexer.\n */\n\n/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\n\n\nexport var TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\n * The enum type representing the token kinds values.\n */\n\n/**\n * A helper function to describe a token as a string for debugging\n */\n\nexport function getTokenDesc(token) {\n  var value = token.value;\n  return value ? \"\".concat(token.kind, \" \\\"\").concat(value, \"\\\"\") : token.kind;\n}\nvar charCodeAt = String.prototype.charCodeAt;\nvar slice = String.prototype.slice;\n/**\n * Helper function for constructing the Token object.\n */\n\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\ndefineToJSON(Tok, function () {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n});\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = charCodeAt.call(body, pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (charCodeAt.call(body, pos + 1) === 46 && charCodeAt.call(body, pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (charCodeAt.call(body, pos + 1) === 34 && charCodeAt.call(body, pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev, lexer);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return \"Unexpected single quote character ('), did you mean to use \" + 'a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * character, then returns the position of that character for lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = charCodeAt.call(body, position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (charCodeAt.call(body, position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = charCodeAt.call(body, ++position);\n  } while (code !== null && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, slice.call(body, start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = charCodeAt.call(body, ++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = charCodeAt.call(body, ++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = charCodeAt.call(body, ++position);\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = charCodeAt.call(body, ++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = charCodeAt.call(body, ++position);\n    }\n\n    position = readDigits(source, position, code);\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, slice.call(body, start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = charCodeAt.call(body, ++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += slice.call(body, chunkStart, position - 1);\n      code = charCodeAt.call(body, position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          // u\n          var charCode = uniCharCode(charCodeAt.call(body, position + 1), charCodeAt.call(body, position + 2), charCodeAt.call(body, position + 3), charCodeAt.call(body, position + 4));\n\n          if (charCode < 0) {\n            throw syntaxError(source, position, 'Invalid character escape sequence: ' + \"\\\\u\".concat(body.slice(position + 1, position + 5), \".\"));\n          }\n\n          value += String.fromCharCode(charCode);\n          position += 4;\n          break;\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev, lexer) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34) {\n      rawValue += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, blockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (charCodeAt.call(body, position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if ( // Escape Triple-Quote (\\\"\"\")\n    code === 92 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34 && charCodeAt.call(body, position + 3) === 34) {\n      rawValue += slice.call(body, chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && (code = charCodeAt.call(body, position)) !== null && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, slice.call(body, start, position));\n}","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * The set of allowed kind values for AST nodes.\n */\nexport var Kind = Object.freeze({\n  // Name\n  NAME: 'Name',\n  // Document\n  DOCUMENT: 'Document',\n  OPERATION_DEFINITION: 'OperationDefinition',\n  VARIABLE_DEFINITION: 'VariableDefinition',\n  SELECTION_SET: 'SelectionSet',\n  FIELD: 'Field',\n  ARGUMENT: 'Argument',\n  // Fragments\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_FRAGMENT: 'InlineFragment',\n  FRAGMENT_DEFINITION: 'FragmentDefinition',\n  // Values\n  VARIABLE: 'Variable',\n  INT: 'IntValue',\n  FLOAT: 'FloatValue',\n  STRING: 'StringValue',\n  BOOLEAN: 'BooleanValue',\n  NULL: 'NullValue',\n  ENUM: 'EnumValue',\n  LIST: 'ListValue',\n  OBJECT: 'ObjectValue',\n  OBJECT_FIELD: 'ObjectField',\n  // Directives\n  DIRECTIVE: 'Directive',\n  // Types\n  NAMED_TYPE: 'NamedType',\n  LIST_TYPE: 'ListType',\n  NON_NULL_TYPE: 'NonNullType',\n  // Type System Definitions\n  SCHEMA_DEFINITION: 'SchemaDefinition',\n  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',\n  // Type Definitions\n  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',\n  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',\n  FIELD_DEFINITION: 'FieldDefinition',\n  INPUT_VALUE_DEFINITION: 'InputValueDefinition',\n  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',\n  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',\n  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',\n  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',\n  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',\n  // Directive Definitions\n  DIRECTIVE_DEFINITION: 'DirectiveDefinition',\n  // Type System Extensions\n  SCHEMA_EXTENSION: 'SchemaExtension',\n  // Type Extensions\n  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',\n  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',\n  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',\n  UNION_TYPE_EXTENSION: 'UnionTypeExtension',\n  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',\n  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'\n});\n/**\n * The enum type representing the possible kind values of AST nodes.\n */","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * The set of allowed directive location values.\n */\nexport var DirectiveLocation = Object.freeze({\n  // Request Definitions\n  QUERY: 'QUERY',\n  MUTATION: 'MUTATION',\n  SUBSCRIPTION: 'SUBSCRIPTION',\n  FIELD: 'FIELD',\n  FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',\n  FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',\n  INLINE_FRAGMENT: 'INLINE_FRAGMENT',\n  VARIABLE_DEFINITION: 'VARIABLE_DEFINITION',\n  // Type System Definitions\n  SCHEMA: 'SCHEMA',\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  FIELD_DEFINITION: 'FIELD_DEFINITION',\n  ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  ENUM_VALUE: 'ENUM_VALUE',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'\n});\n/**\n * The enum type representing the directive location values.\n */","/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport inspect from '../jsutils/inspect';\nimport defineToJSON from '../jsutils/defineToJSON';\nimport { Source } from './source';\nimport { syntaxError } from '../error';\nimport { createLexer, TokenKind, getTokenDesc } from './lexer';\nimport { Kind } from './kinds';\nimport { DirectiveLocation } from './directiveLocation';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\n\nexport function parse(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n\n  if (!(sourceObj instanceof Source)) {\n    throw new TypeError(\"Must provide Source. Received: \".concat(inspect(sourceObj)));\n  }\n\n  var lexer = createLexer(sourceObj, options || {});\n  return parseDocument(lexer);\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  var lexer = createLexer(sourceObj, options || {});\n  expect(lexer, TokenKind.SOF);\n  var value = parseValueLiteral(lexer, false);\n  expect(lexer, TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  var lexer = createLexer(sourceObj, options || {});\n  expect(lexer, TokenKind.SOF);\n  var type = parseTypeReference(lexer);\n  expect(lexer, TokenKind.EOF);\n  return type;\n}\n/**\n * Converts a name lex token into a name parse node.\n */\n\nfunction parseName(lexer) {\n  var token = expect(lexer, TokenKind.NAME);\n  return {\n    kind: Kind.NAME,\n    value: token.value,\n    loc: loc(lexer, token)\n  };\n} // Implements the parsing rules in the Document section.\n\n/**\n * Document : Definition+\n */\n\n\nfunction parseDocument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.DOCUMENT,\n    definitions: many(lexer, TokenKind.SOF, parseDefinition, TokenKind.EOF),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Definition :\n *   - ExecutableDefinition\n *   - TypeSystemDefinition\n *   - TypeSystemExtension\n */\n\n\nfunction parseDefinition(lexer) {\n  if (peek(lexer, TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n      case 'fragment':\n        return parseExecutableDefinition(lexer);\n\n      case 'schema':\n      case 'scalar':\n      case 'type':\n      case 'interface':\n      case 'union':\n      case 'enum':\n      case 'input':\n      case 'directive':\n        return parseTypeSystemDefinition(lexer);\n\n      case 'extend':\n        return parseTypeSystemExtension(lexer);\n    }\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\n    return parseExecutableDefinition(lexer);\n  } else if (peekDescription(lexer)) {\n    return parseTypeSystemDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n}\n/**\n * ExecutableDefinition :\n *   - OperationDefinition\n *   - FragmentDefinition\n */\n\n\nfunction parseExecutableDefinition(lexer) {\n  if (peek(lexer, TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n        return parseOperationDefinition(lexer);\n\n      case 'fragment':\n        return parseFragmentDefinition(lexer);\n    }\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\n    return parseOperationDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n} // Implements the parsing rules in the Operations section.\n\n/**\n * OperationDefinition :\n *  - SelectionSet\n *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n */\n\n\nfunction parseOperationDefinition(lexer) {\n  var start = lexer.token;\n\n  if (peek(lexer, TokenKind.BRACE_L)) {\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: 'query',\n      name: undefined,\n      variableDefinitions: [],\n      directives: [],\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  var operation = parseOperationType(lexer);\n  var name;\n\n  if (peek(lexer, TokenKind.NAME)) {\n    name = parseName(lexer);\n  }\n\n  return {\n    kind: Kind.OPERATION_DEFINITION,\n    operation: operation,\n    name: name,\n    variableDefinitions: parseVariableDefinitions(lexer),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationType : one of query mutation subscription\n */\n\n\nfunction parseOperationType(lexer) {\n  var operationToken = expect(lexer, TokenKind.NAME);\n\n  switch (operationToken.value) {\n    case 'query':\n      return 'query';\n\n    case 'mutation':\n      return 'mutation';\n\n    case 'subscription':\n      return 'subscription';\n  }\n\n  throw unexpected(lexer, operationToken);\n}\n/**\n * VariableDefinitions : ( VariableDefinition+ )\n */\n\n\nfunction parseVariableDefinitions(lexer) {\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, parseVariableDefinition, TokenKind.PAREN_R) : [];\n}\n/**\n * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n */\n\n\nfunction parseVariableDefinition(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.VARIABLE_DEFINITION,\n    variable: parseVariable(lexer),\n    type: (expect(lexer, TokenKind.COLON), parseTypeReference(lexer)),\n    defaultValue: skip(lexer, TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n    directives: parseDirectives(lexer, true),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Variable : $ Name\n */\n\n\nfunction parseVariable(lexer) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.DOLLAR);\n  return {\n    kind: Kind.VARIABLE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * SelectionSet : { Selection+ }\n */\n\n\nfunction parseSelectionSet(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.SELECTION_SET,\n    selections: many(lexer, TokenKind.BRACE_L, parseSelection, TokenKind.BRACE_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Selection :\n *   - Field\n *   - FragmentSpread\n *   - InlineFragment\n */\n\n\nfunction parseSelection(lexer) {\n  return peek(lexer, TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);\n}\n/**\n * Field : Alias? Name Arguments? Directives? SelectionSet?\n *\n * Alias : Name :\n */\n\n\nfunction parseField(lexer) {\n  var start = lexer.token;\n  var nameOrAlias = parseName(lexer);\n  var alias;\n  var name;\n\n  if (skip(lexer, TokenKind.COLON)) {\n    alias = nameOrAlias;\n    name = parseName(lexer);\n  } else {\n    name = nameOrAlias;\n  }\n\n  return {\n    kind: Kind.FIELD,\n    alias: alias,\n    name: name,\n    arguments: parseArguments(lexer, false),\n    directives: parseDirectives(lexer, false),\n    selectionSet: peek(lexer, TokenKind.BRACE_L) ? parseSelectionSet(lexer) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Arguments[Const] : ( Argument[?Const]+ )\n */\n\n\nfunction parseArguments(lexer, isConst) {\n  var item = isConst ? parseConstArgument : parseArgument;\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, item, TokenKind.PAREN_R) : [];\n}\n/**\n * Argument[Const] : Name : Value[?Const]\n */\n\n\nfunction parseArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, false)),\n    loc: loc(lexer, start)\n  };\n}\n\nfunction parseConstArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseConstValue(lexer)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Fragments section.\n\n/**\n * Corresponds to both FragmentSpread and InlineFragment in the spec.\n *\n * FragmentSpread : ... FragmentName Directives?\n *\n * InlineFragment : ... TypeCondition? Directives? SelectionSet\n */\n\n\nfunction parseFragment(lexer) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.SPREAD);\n  var hasTypeCondition = skipKeyword(lexer, 'on');\n\n  if (!hasTypeCondition && peek(lexer, TokenKind.NAME)) {\n    return {\n      kind: Kind.FRAGMENT_SPREAD,\n      name: parseFragmentName(lexer),\n      directives: parseDirectives(lexer, false),\n      loc: loc(lexer, start)\n    };\n  }\n\n  return {\n    kind: Kind.INLINE_FRAGMENT,\n    typeCondition: hasTypeCondition ? parseNamedType(lexer) : undefined,\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentDefinition :\n *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n *\n * TypeCondition : NamedType\n */\n\n\nfunction parseFragmentDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'fragment'); // Experimental support for defining variables within fragments changes\n  // the grammar of FragmentDefinition:\n  //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n  if (lexer.options.experimentalFragmentVariables) {\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: parseFragmentName(lexer),\n      variableDefinitions: parseVariableDefinitions(lexer),\n      typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n      directives: parseDirectives(lexer, false),\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  return {\n    kind: Kind.FRAGMENT_DEFINITION,\n    name: parseFragmentName(lexer),\n    typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentName : Name but not `on`\n */\n\n\nfunction parseFragmentName(lexer) {\n  if (lexer.token.value === 'on') {\n    throw unexpected(lexer);\n  }\n\n  return parseName(lexer);\n} // Implements the parsing rules in the Values section.\n\n/**\n * Value[Const] :\n *   - [~Const] Variable\n *   - IntValue\n *   - FloatValue\n *   - StringValue\n *   - BooleanValue\n *   - NullValue\n *   - EnumValue\n *   - ListValue[?Const]\n *   - ObjectValue[?Const]\n *\n * BooleanValue : one of `true` `false`\n *\n * NullValue : `null`\n *\n * EnumValue : Name but not `true`, `false` or `null`\n */\n\n\nfunction parseValueLiteral(lexer, isConst) {\n  var token = lexer.token;\n\n  switch (token.kind) {\n    case TokenKind.BRACKET_L:\n      return parseList(lexer, isConst);\n\n    case TokenKind.BRACE_L:\n      return parseObject(lexer, isConst);\n\n    case TokenKind.INT:\n      lexer.advance();\n      return {\n        kind: Kind.INT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.FLOAT:\n      lexer.advance();\n      return {\n        kind: Kind.FLOAT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.STRING:\n    case TokenKind.BLOCK_STRING:\n      return parseStringLiteral(lexer);\n\n    case TokenKind.NAME:\n      if (token.value === 'true' || token.value === 'false') {\n        lexer.advance();\n        return {\n          kind: Kind.BOOLEAN,\n          value: token.value === 'true',\n          loc: loc(lexer, token)\n        };\n      } else if (token.value === 'null') {\n        lexer.advance();\n        return {\n          kind: Kind.NULL,\n          loc: loc(lexer, token)\n        };\n      }\n\n      lexer.advance();\n      return {\n        kind: Kind.ENUM,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.DOLLAR:\n      if (!isConst) {\n        return parseVariable(lexer);\n      }\n\n      break;\n  }\n\n  throw unexpected(lexer);\n}\n\nfunction parseStringLiteral(lexer) {\n  var token = lexer.token;\n  lexer.advance();\n  return {\n    kind: Kind.STRING,\n    value: token.value,\n    block: token.kind === TokenKind.BLOCK_STRING,\n    loc: loc(lexer, token)\n  };\n}\n\nexport function parseConstValue(lexer) {\n  return parseValueLiteral(lexer, true);\n}\n\nfunction parseValueValue(lexer) {\n  return parseValueLiteral(lexer, false);\n}\n/**\n * ListValue[Const] :\n *   - [ ]\n *   - [ Value[?Const]+ ]\n */\n\n\nfunction parseList(lexer, isConst) {\n  var start = lexer.token;\n  var item = isConst ? parseConstValue : parseValueValue;\n  return {\n    kind: Kind.LIST,\n    values: any(lexer, TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectValue[Const] :\n *   - { }\n *   - { ObjectField[?Const]+ }\n */\n\n\nfunction parseObject(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.BRACE_L);\n  var fields = [];\n\n  while (!skip(lexer, TokenKind.BRACE_R)) {\n    fields.push(parseObjectField(lexer, isConst));\n  }\n\n  return {\n    kind: Kind.OBJECT,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectField[Const] : Name : Value[?Const]\n */\n\n\nfunction parseObjectField(lexer, isConst) {\n  var start = lexer.token;\n  return {\n    kind: Kind.OBJECT_FIELD,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, isConst)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Directives section.\n\n/**\n * Directives[Const] : Directive[?Const]+\n */\n\n\nfunction parseDirectives(lexer, isConst) {\n  var directives = [];\n\n  while (peek(lexer, TokenKind.AT)) {\n    directives.push(parseDirective(lexer, isConst));\n  }\n\n  return directives;\n}\n/**\n * Directive[Const] : @ Name Arguments[?Const]?\n */\n\n\nfunction parseDirective(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.AT);\n  return {\n    kind: Kind.DIRECTIVE,\n    name: parseName(lexer),\n    arguments: parseArguments(lexer, isConst),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Types section.\n\n/**\n * Type :\n *   - NamedType\n *   - ListType\n *   - NonNullType\n */\n\n\nexport function parseTypeReference(lexer) {\n  var start = lexer.token;\n  var type;\n\n  if (skip(lexer, TokenKind.BRACKET_L)) {\n    type = parseTypeReference(lexer);\n    expect(lexer, TokenKind.BRACKET_R);\n    type = {\n      kind: Kind.LIST_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  } else {\n    type = parseNamedType(lexer);\n  }\n\n  if (skip(lexer, TokenKind.BANG)) {\n    return {\n      kind: Kind.NON_NULL_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  }\n\n  return type;\n}\n/**\n * NamedType : Name\n */\n\nexport function parseNamedType(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.NAMED_TYPE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Type Definition section.\n\n/**\n * TypeSystemDefinition :\n *   - SchemaDefinition\n *   - TypeDefinition\n *   - DirectiveDefinition\n *\n * TypeDefinition :\n *   - ScalarTypeDefinition\n *   - ObjectTypeDefinition\n *   - InterfaceTypeDefinition\n *   - UnionTypeDefinition\n *   - EnumTypeDefinition\n *   - InputObjectTypeDefinition\n */\n\nfunction parseTypeSystemDefinition(lexer) {\n  // Many definitions begin with a description and require a lookahead.\n  var keywordToken = peekDescription(lexer) ? lexer.lookahead() : lexer.token;\n\n  if (keywordToken.kind === TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaDefinition(lexer);\n\n      case 'scalar':\n        return parseScalarTypeDefinition(lexer);\n\n      case 'type':\n        return parseObjectTypeDefinition(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeDefinition(lexer);\n\n      case 'union':\n        return parseUnionTypeDefinition(lexer);\n\n      case 'enum':\n        return parseEnumTypeDefinition(lexer);\n\n      case 'input':\n        return parseInputObjectTypeDefinition(lexer);\n\n      case 'directive':\n        return parseDirectiveDefinition(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n\nfunction peekDescription(lexer) {\n  return peek(lexer, TokenKind.STRING) || peek(lexer, TokenKind.BLOCK_STRING);\n}\n/**\n * Description : StringValue\n */\n\n\nfunction parseDescription(lexer) {\n  if (peekDescription(lexer)) {\n    return parseStringLiteral(lexer);\n  }\n}\n/**\n * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n */\n\n\nfunction parseSchemaDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R);\n  return {\n    kind: Kind.SCHEMA_DEFINITION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationTypeDefinition : OperationType : NamedType\n */\n\n\nfunction parseOperationTypeDefinition(lexer) {\n  var start = lexer.token;\n  var operation = parseOperationType(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseNamedType(lexer);\n  return {\n    kind: Kind.OPERATION_TYPE_DEFINITION,\n    operation: operation,\n    type: type,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n */\n\n\nfunction parseScalarTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.SCALAR_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeDefinition :\n *   Description?\n *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n */\n\n\nfunction parseObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: Kind.OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ImplementsInterfaces :\n *   - implements `&`? NamedType\n *   - ImplementsInterfaces & NamedType\n */\n\n\nfunction parseImplementsInterfaces(lexer) {\n  var types = [];\n\n  if (skipKeyword(lexer, 'implements')) {\n    // Optional leading ampersand\n    skip(lexer, TokenKind.AMP);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, TokenKind.AMP) || // Legacy support for the SDL?\n    lexer.options.allowLegacySDLImplementsInterfaces && peek(lexer, TokenKind.NAME));\n  }\n\n  return types;\n}\n/**\n * FieldsDefinition : { FieldDefinition+ }\n */\n\n\nfunction parseFieldsDefinition(lexer) {\n  // Legacy support for the SDL?\n  if (lexer.options.allowLegacySDLEmptyFields && peek(lexer, TokenKind.BRACE_L) && lexer.lookahead().kind === TokenKind.BRACE_R) {\n    lexer.advance();\n    lexer.advance();\n    return [];\n  }\n\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseFieldDefinition, TokenKind.BRACE_R) : [];\n}\n/**\n * FieldDefinition :\n *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n */\n\n\nfunction parseFieldDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.FIELD_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    type: type,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ArgumentsDefinition : ( InputValueDefinition+ )\n */\n\n\nfunction parseArgumentDefs(lexer) {\n  if (!peek(lexer, TokenKind.PAREN_L)) {\n    return [];\n  }\n\n  return many(lexer, TokenKind.PAREN_L, parseInputValueDef, TokenKind.PAREN_R);\n}\n/**\n * InputValueDefinition :\n *   - Description? Name : Type DefaultValue? Directives[Const]?\n */\n\n\nfunction parseInputValueDef(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var defaultValue;\n\n  if (skip(lexer, TokenKind.EQUALS)) {\n    defaultValue = parseConstValue(lexer);\n  }\n\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.INPUT_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    type: type,\n    defaultValue: defaultValue,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeDefinition :\n *   - Description? interface Name Directives[Const]? FieldsDefinition?\n */\n\n\nfunction parseInterfaceTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: Kind.INTERFACE_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeDefinition :\n *   - Description? union Name Directives[Const]? UnionMemberTypes?\n */\n\n\nfunction parseUnionTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n  return {\n    kind: Kind.UNION_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionMemberTypes :\n *   - = `|`? NamedType\n *   - UnionMemberTypes | NamedType\n */\n\n\nfunction parseUnionMemberTypes(lexer) {\n  var types = [];\n\n  if (skip(lexer, TokenKind.EQUALS)) {\n    // Optional leading pipe\n    skip(lexer, TokenKind.PIPE);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, TokenKind.PIPE));\n  }\n\n  return types;\n}\n/**\n * EnumTypeDefinition :\n *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n */\n\n\nfunction parseEnumTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n  return {\n    kind: Kind.ENUM_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumValuesDefinition : { EnumValueDefinition+ }\n */\n\n\nfunction parseEnumValuesDefinition(lexer) {\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseEnumValueDefinition, TokenKind.BRACE_R) : [];\n}\n/**\n * EnumValueDefinition : Description? EnumValue Directives[Const]?\n *\n * EnumValue : Name\n */\n\n\nfunction parseEnumValueDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.ENUM_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeDefinition :\n *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n */\n\n\nfunction parseInputObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputFieldsDefinition : { InputValueDefinition+ }\n */\n\n\nfunction parseInputFieldsDefinition(lexer) {\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseInputValueDef, TokenKind.BRACE_R) : [];\n}\n/**\n * TypeSystemExtension :\n *   - SchemaExtension\n *   - TypeExtension\n *\n * TypeExtension :\n *   - ScalarTypeExtension\n *   - ObjectTypeExtension\n *   - InterfaceTypeExtension\n *   - UnionTypeExtension\n *   - EnumTypeExtension\n *   - InputObjectTypeDefinition\n */\n\n\nfunction parseTypeSystemExtension(lexer) {\n  var keywordToken = lexer.lookahead();\n\n  if (keywordToken.kind === TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaExtension(lexer);\n\n      case 'scalar':\n        return parseScalarTypeExtension(lexer);\n\n      case 'type':\n        return parseObjectTypeExtension(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeExtension(lexer);\n\n      case 'union':\n        return parseUnionTypeExtension(lexer);\n\n      case 'enum':\n        return parseEnumTypeExtension(lexer);\n\n      case 'input':\n        return parseInputObjectTypeExtension(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n/**\n * SchemaExtension :\n *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n *  - extend schema Directives[Const]\n */\n\n\nfunction parseSchemaExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R) : [];\n\n  if (directives.length === 0 && operationTypes.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.SCHEMA_EXTENSION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ScalarTypeExtension :\n *   - extend scalar Name Directives[Const]\n */\n\n\nfunction parseScalarTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n\n  if (directives.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.SCALAR_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeExtension :\n *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n *  - extend type Name ImplementsInterfaces? Directives[Const]\n *  - extend type Name ImplementsInterfaces\n */\n\n\nfunction parseObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.OBJECT_TYPE_EXTENSION,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeExtension :\n *   - extend interface Name Directives[Const]? FieldsDefinition\n *   - extend interface Name Directives[Const]\n */\n\n\nfunction parseInterfaceTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.INTERFACE_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeExtension :\n *   - extend union Name Directives[Const]? UnionMemberTypes\n *   - extend union Name Directives[Const]\n */\n\n\nfunction parseUnionTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n\n  if (directives.length === 0 && types.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.UNION_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumTypeExtension :\n *   - extend enum Name Directives[Const]? EnumValuesDefinition\n *   - extend enum Name Directives[Const]\n */\n\n\nfunction parseEnumTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n\n  if (directives.length === 0 && values.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.ENUM_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeExtension :\n *   - extend input Name Directives[Const]? InputFieldsDefinition\n *   - extend input Name Directives[Const]\n */\n\n\nfunction parseInputObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveDefinition :\n *   - Description? directive @ Name ArgumentsDefinition? on DirectiveLocations\n */\n\n\nfunction parseDirectiveDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'directive');\n  expect(lexer, TokenKind.AT);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expectKeyword(lexer, 'on');\n  var locations = parseDirectiveLocations(lexer);\n  return {\n    kind: Kind.DIRECTIVE_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    locations: locations,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveLocations :\n *   - `|`? DirectiveLocation\n *   - DirectiveLocations | DirectiveLocation\n */\n\n\nfunction parseDirectiveLocations(lexer) {\n  // Optional leading pipe\n  skip(lexer, TokenKind.PIPE);\n  var locations = [];\n\n  do {\n    locations.push(parseDirectiveLocation(lexer));\n  } while (skip(lexer, TokenKind.PIPE));\n\n  return locations;\n}\n/*\n * DirectiveLocation :\n *   - ExecutableDirectiveLocation\n *   - TypeSystemDirectiveLocation\n *\n * ExecutableDirectiveLocation : one of\n *   `QUERY`\n *   `MUTATION`\n *   `SUBSCRIPTION`\n *   `FIELD`\n *   `FRAGMENT_DEFINITION`\n *   `FRAGMENT_SPREAD`\n *   `INLINE_FRAGMENT`\n *\n * TypeSystemDirectiveLocation : one of\n *   `SCHEMA`\n *   `SCALAR`\n *   `OBJECT`\n *   `FIELD_DEFINITION`\n *   `ARGUMENT_DEFINITION`\n *   `INTERFACE`\n *   `UNION`\n *   `ENUM`\n *   `ENUM_VALUE`\n *   `INPUT_OBJECT`\n *   `INPUT_FIELD_DEFINITION`\n */\n\n\nfunction parseDirectiveLocation(lexer) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n\n  if (DirectiveLocation.hasOwnProperty(name.value)) {\n    return name;\n  }\n\n  throw unexpected(lexer, start);\n} // Core parsing utility functions\n\n/**\n * Returns a location object, used to identify the place in\n * the source that created a given parsed object.\n */\n\n\nfunction loc(lexer, startToken) {\n  if (!lexer.options.noLocation) {\n    return new Loc(startToken, lexer.lastToken, lexer.source);\n  }\n}\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\ndefineToJSON(Loc, function () {\n  return {\n    start: this.start,\n    end: this.end\n  };\n});\n/**\n * Determines if the next token is of a given kind\n */\n\nfunction peek(lexer, kind) {\n  return lexer.token.kind === kind;\n}\n/**\n * If the next token is of the given kind, return true after advancing\n * the lexer. Otherwise, do not change the parser state and return false.\n */\n\n\nfunction skip(lexer, kind) {\n  if (lexer.token.kind === kind) {\n    lexer.advance();\n    return true;\n  }\n\n  return false;\n}\n/**\n * If the next token is of the given kind, return that token after advancing\n * the lexer. Otherwise, do not change the parser state and throw an error.\n */\n\n\nfunction expect(lexer, kind) {\n  var token = lexer.token;\n\n  if (token.kind === kind) {\n    lexer.advance();\n    return token;\n  }\n\n  throw syntaxError(lexer.source, token.start, \"Expected \".concat(kind, \", found \").concat(getTokenDesc(token)));\n}\n/**\n * If the next token is a keyword with the given value, return true after advancing\n * the lexer. Otherwise, do not change the parser state and return false.\n */\n\n\nfunction skipKeyword(lexer, value) {\n  var token = lexer.token;\n\n  if (token.kind === TokenKind.NAME && token.value === value) {\n    lexer.advance();\n    return true;\n  }\n\n  return false;\n}\n/**\n * If the next token is a keyword with the given value, return that token after\n * advancing the lexer. Otherwise, do not change the parser state and throw\n * an error.\n */\n\n\nfunction expectKeyword(lexer, value) {\n  if (!skipKeyword(lexer, value)) {\n    throw syntaxError(lexer.source, lexer.token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(lexer.token)));\n  }\n}\n/**\n * Helper function for creating an error when an unexpected lexed token\n * is encountered.\n */\n\n\nfunction unexpected(lexer, atToken) {\n  var token = atToken || lexer.token;\n  return syntaxError(lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token)));\n}\n/**\n * Returns a possibly empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\n\nfunction any(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [];\n\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}\n/**\n * Returns a non-empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\n\nfunction many(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [parseFn(lexer)];\n\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}","import { createContext } from 'react';\nexport function createSSRManager() {\n  var promiseSet = new Set();\n  return {\n    hasPromises: function hasPromises() {\n      return promiseSet.size > 0;\n    },\n    register: function register(promise) {\n      promiseSet.add(promise);\n    },\n    consumeAndAwaitPromises: function consumeAndAwaitPromises() {\n      var promises = Array.from(promiseSet);\n      promiseSet.clear();\n      return Promise.all(promises);\n    }\n  };\n}\nexport var SSRContext = createContext(null);","import isPlainObject from 'lodash/isPlainObject';\nexport function objToKey(obj) {\n  if (!isPlainObject(obj)) {\n    return obj;\n  }\n\n  var sortedObj = Object.keys(obj).sort().reduce(function (result, key) {\n    result[key] = objToKey(obj[key]);\n    return result;\n  }, {});\n  return JSON.stringify(sortedObj);\n}\nexport function isPromiseLike(value) {\n  return value != null && typeof value.then === 'function';\n}\nexport function compact(obj) {\n  return Object.keys(obj).reduce(function (acc, key) {\n    if (obj[key] !== undefined) {\n      acc[key] = obj[key];\n    }\n\n    return acc;\n  }, {});\n}","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { print } from 'graphql/language/printer';\nimport { objToKey } from './utils';\nvar cachedQueriesByClient = new WeakMap();\nexport function getCachedObservableQuery(client, options) {\n  var queriesForClient = getCachedQueriesForClient(client);\n  var cacheKey = getCacheKey(options);\n  var observableQuery = queriesForClient.get(cacheKey);\n\n  if (observableQuery == null) {\n    observableQuery = client.watchQuery(options);\n    queriesForClient.set(cacheKey, observableQuery);\n  }\n\n  return observableQuery;\n}\nexport function invalidateCachedObservableQuery(client, options) {\n  var queriesForClient = getCachedQueriesForClient(client);\n  var cacheKey = getCacheKey(options);\n  queriesForClient.delete(cacheKey);\n}\n\nfunction getCachedQueriesForClient(client) {\n  var queriesForClient = cachedQueriesByClient.get(client);\n\n  if (queriesForClient == null) {\n    queriesForClient = new Map();\n    cachedQueriesByClient.set(client, queriesForClient);\n  }\n\n  return queriesForClient;\n}\n\nfunction getCacheKey(_ref) {\n  var query = _ref.query,\n      options = _objectWithoutPropertiesLoose(_ref, [\"query\"]);\n\n  return print(query) + \"@@\" + objToKey(options);\n}","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { ApolloError } from 'apollo-client';\nimport { useContext, useEffect, useMemo, useState } from 'react';\nimport { useApolloClient } from './ApolloContext';\nimport { SSRContext } from './internal/SSRContext';\nimport actHack from './internal/actHack';\nimport { getCachedObservableQuery, invalidateCachedObservableQuery } from './queryCache';\nimport { compact, objToKey } from './utils';\nexport function useQuery(query, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr,\n      _ref$skip = _ref.skip,\n      skip = _ref$skip === void 0 ? false : _ref$skip,\n      _ref$suspend = _ref.suspend,\n      suspend = _ref$suspend === void 0 ? false : _ref$suspend,\n      pollInterval = _ref.pollInterval,\n      _ref$notifyOnNetworkS = _ref.notifyOnNetworkStatusChange,\n      notifyOnNetworkStatusChange = _ref$notifyOnNetworkS === void 0 ? false : _ref$notifyOnNetworkS,\n      context = _ref.context,\n      metadata = _ref.metadata,\n      variables = _ref.variables,\n      actualCachePolicy = _ref.fetchPolicy,\n      errorPolicy = _ref.errorPolicy,\n      fetchResults = _ref.fetchResults;\n\n  var client = useApolloClient();\n  var ssrManager = useContext(SSRContext);\n  var ssrInUse = ssr && ssrManager; // Skips when `skip: true` or SSRContext passed but `ssr: false`\n\n  var shouldSkip = skip || ssrManager != null && !ssr;\n  var fetchPolicy = ssrInUse && ( // Taken from https://github.com/apollographql/react-apollo/blob/2d7e48b7d0c26e792e1ed26e98bb84d8fba5bb8a/src/Query.tsx#L167-L169\n  actualCachePolicy === 'network-only' || actualCachePolicy === 'cache-and-network') ? 'cache-first' : actualCachePolicy;\n  var watchQueryOptions = useMemo(function () {\n    return compact({\n      context: context,\n      errorPolicy: errorPolicy,\n      fetchPolicy: fetchPolicy,\n      fetchResults: fetchResults,\n      metadata: metadata,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      pollInterval: pollInterval,\n      query: query,\n      variables: variables\n    });\n  }, [query, pollInterval, notifyOnNetworkStatusChange, context && objToKey(context), metadata && objToKey(metadata), variables && objToKey(variables), fetchPolicy, errorPolicy, fetchResults]);\n  var observableQuery = useMemo(function () {\n    return getCachedObservableQuery(client, watchQueryOptions);\n  }, [client, watchQueryOptions]);\n\n  var _useState = useState(0),\n      responseId = _useState[0],\n      setResponseId = _useState[1];\n\n  var currentResult = useMemo(function () {\n    var result = observableQuery.currentResult();\n    return {\n      data: result.data,\n      error: result.errors && result.errors.length > 0 ? new ApolloError({\n        graphQLErrors: result.errors\n      }) : result.error,\n      errors: result.errors,\n      loading: result.loading,\n      // don't try to return `networkStatus` when suspense it's used\n      // because it's unreliable in that case\n      // https://github.com/trojanowski/react-apollo-hooks/pull/68\n      networkStatus: suspend ? undefined : result.networkStatus,\n      partial: result.partial\n    };\n  }, [shouldSkip, responseId, observableQuery]);\n  useEffect(function () {\n    if (shouldSkip) {\n      return;\n    }\n\n    var invalidateCurrentResult = function invalidateCurrentResult() {\n      // A hack to get rid React warnings during tests. The default\n      // implementation of `actHack` just invokes the callback immediately.\n      // In tests, it's replaced with `act` from react-testing-library.\n      // A better solution welcome.\n      actHack(function () {\n        setResponseId(function (x) {\n          return x + 1;\n        });\n      });\n    };\n\n    var subscription = observableQuery.subscribe(invalidateCurrentResult, invalidateCurrentResult);\n    invalidateCachedObservableQuery(client, watchQueryOptions);\n    return function () {\n      subscription.unsubscribe();\n    };\n  }, [shouldSkip, observableQuery]);\n  ensureSupportedFetchPolicy(suspend, fetchPolicy);\n  var helpers = {\n    fetchMore: observableQuery.fetchMore.bind(observableQuery),\n    refetch: observableQuery.refetch.bind(observableQuery),\n    startPolling: observableQuery.startPolling.bind(observableQuery),\n    stopPolling: observableQuery.stopPolling.bind(observableQuery),\n    updateQuery: observableQuery.updateQuery.bind(observableQuery)\n  };\n\n  if (shouldSkip) {\n    // Taken from https://github.com/apollographql/react-apollo/blob/5cb63b3625ce5e4a3d3e4ba132eaec2a38ef5d90/src/Query.tsx#L376-L381\n    return _extends({}, helpers, {\n      data: undefined,\n      error: undefined,\n      loading: false,\n      networkStatus: undefined\n    });\n  }\n\n  if (currentResult.partial) {\n    if (suspend) {\n      // throw a promise - use the react suspense to wait until the data is\n      // available\n      throw observableQuery.result();\n    }\n\n    if (ssrInUse) {\n      ssrManager.register(observableQuery.result());\n    }\n  }\n\n  return _extends({}, helpers, currentResult);\n}\n\nfunction ensureSupportedFetchPolicy(suspend, fetchPolicy) {\n  if (suspend && fetchPolicy && fetchPolicy !== 'cache-first') {\n    throw new Error(\"Fetch policy \" + fetchPolicy + \" is not supported without 'suspend: false'\");\n  }\n}","export default function actHack(callback) {\n  callback();\n}"],"sourceRoot":""}