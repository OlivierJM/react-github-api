{"version":3,"sources":["GitQuery.js","Repositories.js","App.js","serviceWorker.js","index.js"],"names":["GET_REPOS","gql","_templateObject","Repos","_ref","login","react_default","a","createElement","react_apollo_browser_umd","query","variables","fetchPolicy","_ref2","loading","data","user","repositories","nodes","map","repo","i","className","key","style","width","name","stargazers","totalCount","isFork","description","href","url","Repositories","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateQuery","value","target","setState","onChange","e","persist","delayedCallback","state","_","debounce","placeholder","type","GitQuery_Repos","React","Component","App","client","src_Repositories","Boolean","window","location","hostname","match","httpLink","createHttpLink","uri","authLink","setContext","headers","token","process","objectSpread","authorization","concat","ApolloClient","link","cache","InMemoryCache","src_templateObject","then","result","console","log","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2228ea87.chunk.js","sourcesContent":["import React from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\n\nconst GET_REPOS = gql`\n  query GETREPOS($login: String!) {\n    user(login: $login) {\n      repositoriesContributedTo(last: 5) {\n        totalCount\n        nodes {\n          name\n        }\n      }\n      repositories(last: 50) {\n        totalCount\n        nodes {\n          name\n          url\n          description\n          isFork\n          stargazers(last: 5) {\n            nodes {\n              name\n            }\n            totalCount\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const Repos = ({ login }) => (\n  <Query query={GET_REPOS} variables={{ login }} fetchPolicy={\"network-only\"}>\n    {({ loading, data }) =>\n      (!loading &&\n        data &&\n        data.user.repositories.nodes.map((repo, i) => (\n          <div className=\"col-4 col\" key={i} >\n          <div className=\"card\" style={{ width: \"20em\" }}>\n            <div className=\"card-body\">\n              <h4 className=\"card-title\">{repo.name}</h4>\n              <h5 className=\"card-subtitle\">{repo.stargazers.totalCount}</h5>\n              <h5 className=\"card-subtitle\">{repo.isFork && 'Forked'}</h5>\n              <p className=\"card-text\">{repo.description}</p>\n              <a className=\"card-link\" href={repo.url}>\n                Github Link\n              </a>\n            </div>\n          </div>\n        </div>\n        ))) || <div className='row flex-center'><p className='flex-center'>Loading...</p></div>\n    }\n  </Query>\n)\n","import React from \"react\"\nimport { Repos } from \"./GitQuery\"\nimport _ from \"lodash\"\n\nclass Repositories extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: \"\" // initial query\n    }\n    this.delayedCallback = _.debounce(this.updateQuery, 1000)\n  }\n\n  updateQuery = ({target: { value }}) => {\n    this.setState({ query: value })\n  }\n\n  onChange = e => {\n    e.persist()\n    this.delayedCallback(e)\n  }\n\n  render() {\n    const { query } = this.state\n    return (\n      <div>\n          <div className='row flex-center'>\n            <div className=\"form-group\">\n                <input onChange={this.onChange} placeholder='type a username' type='text' />\n            </div>\n          </div>\n        <div className='row'>\n            <Repos login={query}/> \n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Repositories\n","import React, { Component } from 'react';\nimport { ApolloProvider } from 'react-apollo'\nimport './App.css';\nimport Repositories from './Repositories'\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={this.props.client}>\n      <div className=\"App\">\n          <Repositories />\n      </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ApolloClient from \"apollo-client\";\nimport gql from \"graphql-tag\";\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\n\nconst httpLink = createHttpLink({\n  uri: 'https://api.github.com/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = process.env.REACT_APP_TOKEN\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    }\n  }\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\nclient\n  .query({\n    query: gql`\n      {\n        user(login: \"olivierjm\") {\n            repositoriesContributedTo(last: 5) {\n            totalCount\n            nodes {\n                name\n              }\n            }\n            repositories(last: 10) {\n            totalCount\n            nodes {\n                id\n                name\n                url\n                description\n                stargazers(last: 5) {\n                nodes {\n                    name\n                }\n              }\n            }\n          }\n        }\n      }\n\n    `\n  })\n  .then(result => console.log(result));\n\nReactDOM.render(<App client={client}/>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}