{"version":3,"sources":["serviceWorker.js","components/FallbackUI.tsx","App.tsx","config.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","FallBackUI","react","style","marginTop","textAlign","fontSize","className","Repos","React","Promise","all","__webpack_require__","e","then","bind","App","_ref","client","react_apollo_browser_umd","ApolloContext","fallback","FallbackUI","httpLink","createHttpLink","uri","authLink","setContext","_","headers","token","process","REACT_APP_TOKEN","Object","objectSpread","authorization","concat","ApolloClient","link","cache","InMemoryCache","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+ECLSC,MAVf,WACE,OACEC,EAAA,mBACEC,MAAO,CAAEC,UAAW,MAAOC,UAAW,SAAUC,SAAU,SAC1DC,UAAU,eAFZ,eCIEC,EAAQC,OAAW,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YAahBC,EAXqB,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,OAAH,OAClChB,EAAA,cAACiB,EAAA,eAAD,CAAgBD,OAAQA,GACtBhB,EAAA,cAACkB,EAAA,EAAD,CAAsBF,OAAQA,GAC5BhB,EAAA,cAACA,EAAA,SAAD,CAAgBmB,SAAUnB,EAAA,cAACoB,EAAD,OACxBpB,EAAA,qBAAKK,UAAU,OACbL,EAAA,cAACM,EAAD,mDCXJe,EAAWC,YAAe,CAC9BC,IAAK,mCAGDC,EAAWC,YAAW,SAACC,EAADX,GAAoB,IAAdY,EAAcZ,EAAdY,QAC1BC,EAAQC,+CAAYC,gBAC1B,MAAO,CACLH,QAAQI,OAAAC,EAAA,EAAAD,CAAA,GACHJ,EADE,CAELM,cAAeL,EAAK,UAAAM,OAAaN,GAAU,QAK3CZ,EAAS,IAAImB,UAAa,CAC9BC,KAAMZ,EAASU,OAAOb,GACtBgB,MAAO,IAAIC,MCfbC,IAASC,OAAOxC,EAAA,cAACyC,EAAD,CAAKzB,OAAQA,IAAY0B,SAASC,eAAe,SJ2H3D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.c2561a1c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\"\n\n// this can be made better\nfunction FallBackUI() {\n  return (\n    <p\n      style={{ marginTop: \"20%\", textAlign: \"center\", fontSize: \"3.5em\" }}\n      className=\"flex-center\"\n    >\n      Loading...\n    </p>\n  )\n}\nexport default FallBackUI\n","import * as React from \"react\"\nimport { ApolloProvider } from \"react-apollo\"\nimport { ApolloProvider as ApolloProviderHooked } from \"react-apollo-hooks\"\nimport FallBackUI from \"./components/FallbackUI\"\n\ninterface clientProps {\n  client: any\n}\n\nconst Repos = React.lazy(() => import(\"./components/Repositories\"))\n\nconst App: React.SFC<clientProps> = ({ client }) => (\n  <ApolloProvider client={client}>\n    <ApolloProviderHooked client={client}>\n      <React.Suspense fallback={<FallBackUI />}>\n        <div className=\"App\">\n          <Repos />\n        </div>\n      </React.Suspense>\n    </ApolloProviderHooked>\n  </ApolloProvider>\n)\nexport default App\n","import ApolloClient from \"apollo-client\"\nimport { createHttpLink } from \"apollo-link-http\"\nimport { setContext } from \"apollo-link-context\"\nimport { InMemoryCache } from \"apollo-cache-inmemory\"\n\nconst httpLink = createHttpLink({\n  uri: \"https://api.github.com/graphql\",\n})\n\nconst authLink = setContext((_, { headers }) => {\n  const token = process.env.REACT_APP_TOKEN\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  }\n})\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n})\n\nexport { client as default }\n","import * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport App from \"./App\"\nimport client from \"./config\"\n\nReactDOM.render(<App client={client} />, document.getElementById(\"root\"))\nserviceWorker.unregister()\n"],"sourceRoot":""}