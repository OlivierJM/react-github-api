{"version":3,"sources":["queries/RepoQuery.ts","components/PlaceHolder.tsx","components/Profile.tsx","components/GitQuery.tsx","utils/hooks.tsx","components/Repositories.tsx"],"names":["GET_REPOS","gql","_templateObject","PlaceHolder","react","className","href","Profile","props","name","orgs","location","totalCount","Repos","_ref","login","_useQuery","useQuery","variables","suspend","data","error","loading","components_PlaceHolder","components_Profile","user","repositories","organizations","contributionsCollection","contributionCalendar","totalContributions","nodes","map","repo","i","key","role","aria-label","stargazers","isFork","description","target","rel","url","useDebounce","value","delay","_React$useState","React","_React$useState2","Object","slicedToArray","debounced","setDebounced","handler","setTimeout","clearTimeout","Repositories","_useState","useState","_useState2","query","setQuery","debouncedQuery","inputRef","useRef","useEffect","current","focus","react_default","a","createElement","style","marginTop","length","ref","maxLength","onChange","e","placeholder","type","width","GitQuery_Repos"],"mappings":"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","file":"static/js/4.81d90b35.chunk.js","sourcesContent":["import gql from \"graphql-tag\"\n\nconst GET_REPOS = gql`\n  query GETREPOS($login: String!) {\n    user(login: $login) {\n      name\n      organizations {\n        totalCount\n      }\n      # this will be used on the new page for user info\n      contributionsCollection {\n        totalCommitContributions\n        totalIssueContributions\n        totalPullRequestContributions\n        totalRepositoriesWithContributedIssues\n        totalRepositoriesWithContributedPullRequestReviews\n        totalRepositoryContributions\n        contributionCalendar {\n          totalContributions\n        }\n      }\n      # user image\n      avatarUrl\n      location\n      repositories(\n        first: 100\n        orderBy: { field: STARGAZERS, direction: DESC }\n      ) {\n        totalCount\n        nodes {\n          name\n          url\n          description\n          isFork\n          stargazers(last: 5) {\n            totalCount\n          }\n        }\n      }\n    }\n  }\n`\n\nexport { GET_REPOS }\n","import * as React from \"react\"\n\nfunction PlaceHolder() {\n  return (\n    <div className=\"container\">\n      <div className=\"row flex-center\">\n        <div className=\"text-center\">\n          <h1>Repo Query</h1>\n          <h3>The Easiest way to query a github user's repositories</h3>\n          <h5>Type the github username in the box above to see the repos</h5>\n        </div>\n      </div>\n      <div className=\"row flex-center\">\n        <a\n          className=\"paper-btn margin\"\n          href=\"https://github.com/OlivierJM/react-github-api\"\n        >\n          Fork it here\n        </a>\n        <a\n          className=\"paper-btn margin\"\n          href=\"https://github.com/OlivierJM/react-github-api/issues\"\n        >\n          Issues\n        </a>\n        <a className=\"paper-btn margin\" href=\"https://github.com/OlivierJM\">\n          More from me\n        </a>\n        {/* <img width='' src='https://travis-ci.com/OlivierJM/react-github-api.svg?branch=master' alt='travis build status'/> */}\n      </div>\n      <h4 className=\"text-center\">Contributors</h4>\n      <p className=\"text-center\">The list of contributors is coming soon ...</p>\n    </div>\n  )\n}\nexport default PlaceHolder\n","// this file will be a holder for user's profile info as indicated in the issues\nimport * as React from \"react\"\n\ninterface profileProps {\n  name: string\n  orgs: number\n  location: string\n  totalCount: number\n}\n\nconst Profile: React.SFC<profileProps> = props => (\n  <div className=\"profile\">\n    <h2>{props.name}</h2>\n    <p>\n      Organizations: {props.orgs} <br />\n      Contributions: {props.location} <br />\n      Number of Repos: {props.totalCount}\n    </p>\n    {/* <img src={props.image} alt=\"github avatar\" /> */}\n  </div>\n)\n\nexport default Profile\n","import * as React from \"react\"\nimport { useQuery } from \"react-apollo-hooks\"\nimport { GET_REPOS } from \"../queries/RepoQuery\"\nimport PlaceHolder from \"./PlaceHolder\"\nimport Profile from \"./Profile\"\n\ninterface repoProps {\n  login: string\n}\n\ninterface repo {\n  name: string\n  stargazers: stargazers\n  isFork: boolean\n  description: string\n  url: string\n}\ninterface stargazers {\n  totalCount: number\n}\n\nconst Repos: React.SFC<repoProps> = ({ login }) => {\n  const { data, error, loading } = useQuery(GET_REPOS, {\n    variables: { login },\n    suspend: true,\n  })\n  // fix the returned component to be different\n  if (loading) {\n    return <PlaceHolder />\n  }\n  // The query will originally contain errors because of the initial empty string we are passing üôà\n  if (error) {\n    return <PlaceHolder />\n  }\n  return (\n    <React.Fragment>\n      <div className=\"row\">\n        <Profile\n          totalCount={data.user.repositories.totalCount}\n          name={data.user.name}\n          orgs={data.user.organizations.totalCount}\n          location={\n            data.user.contributionsCollection.contributionCalendar\n              .totalContributions\n          }\n        />\n      </div>\n      <div className=\"row\">\n        {data.user.repositories.nodes.map((repo: repo, i: number) => (\n          <div className=\"sm-12 md-4 col\" key={i}>\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <h4 className=\"card-title\">{repo.name}</h4>\n                <h5 className=\"card-subtitle\">\n                  <span role=\"img\" aria-label=\"stars\">\n                    ‚≠ê\n                  </span>{\" \"}\n                  {repo.stargazers.totalCount}\n                </h5>\n                <h5 className=\"card-subtitle\">{repo.isFork && \"Forked\"}</h5>\n                <p className=\"card-text\">{repo.description}</p>\n                <a\n                  className=\"card-link\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  href={repo.url}\n                >\n                  Github Link\n                </a>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport { Repos }\n","import * as React from \"react\"\n\nconst useDebounce = (value: string, delay: number) => {\n  const [debounced, setDebounced] = React.useState(value)\n  React.useEffect(\n    () => {\n      const handler = setTimeout(() => {\n        setDebounced(value)\n      }, delay)\n      return () => clearTimeout(handler)\n    },\n    [value, delay]\n  )\n  return debounced\n}\nexport { useDebounce }\n","import React, { Fragment, useState, useEffect, useRef } from \"react\"\nimport { Repos } from \"./GitQuery\"\nimport { useDebounce } from \"../utils/hooks\"\n\nfunction Repositories() {\n  const [query, setQuery] = useState(\"\")\n  const debouncedQuery = useDebounce(query, 1000)\n  let inputRef = useRef<HTMLElement | null>(null)\n\n  function handleQueryChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setQuery(e.target.value)\n  }\n  useEffect(() => {\n    if (inputRef && inputRef.current) {\n      inputRef.current.focus()\n    }\n  })\n  return (\n    <Fragment>\n      <div\n        className=\"row flex-center\"\n        style={{ marginTop: query.length ? 0 : \"10%\" }}\n      >\n        <div className=\"form-group\">\n          <input\n            ref={() => inputRef}\n            maxLength={39}\n            onChange={handleQueryChange}\n            placeholder=\"type a github username\"\n            type=\"text\"\n            style={{ width: 200 }}\n          />\n        </div>\n      </div>\n      <div className=\"row\">\n        <Repos login={debouncedQuery} />\n      </div>\n    </Fragment>\n  )\n}\nexport default Repositories\n"],"sourceRoot":""}